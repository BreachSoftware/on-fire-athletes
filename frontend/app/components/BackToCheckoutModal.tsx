"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useDisclosure } from "@chakra-ui/react";
import TradingCardInfo from "@/hooks/TradingCardInfo";
import { CardActionModal } from "../profile/components/cardActionModal";
import { useAuth } from "@/hooks/useAuth";
import { FaCheck, FaXmark } from "react-icons/fa6";
import { getCard } from "../generate_card_asset/cardFunctions";
import { useCurrentCheckout } from "@/hooks/useCheckout";

/**
 * The component for asking the user if they want to return to the checkout screen
 */
export function BackToCheckoutModal() {
    // Router for navigating if needed
    const router = useRouter();

    // Authentication hook to get the uuid of the current user
    const auth = useAuth();

    // Modal for the card action
    const modal = useDisclosure();
    const { checkout, updateCheckout } = useCurrentCheckout();

    // Initialize cardExists state based on local storage
    const [cardExists, setCardExists] = useState(
        TradingCardInfo.cardExistsInLocalStorage(),
    );
    const [currentCard, setCurrentCard] = useState<TradingCardInfo>(
        TradingCardInfo.loadCard(),
    );
    const [isNil, setIsNil] = useState(false);
    const [cardOwnedByUser, setCardOwnedByUser] = useState(false);
    const [cardLoaded, setCardLoaded] = useState(false);

    // On load, check if the card exists in local storage and open the modal if it does.
    // Does not open if you are not the user who generated the card.
    useEffect(() => {
        /**
         * Gets the user ID of the currently logged in user.
         * Returns null if the user is not logged in.
         */
        async function getLoggedInUserID() {
            if (auth.isAuthenticated) {
                const currentUserId = (await auth.currentAuthenticatedUser())
                    .userId;
                return currentUserId;
            }
            return null;
        }

        /**
         * Gets the card with the given UUID and generatedBy parameters.
         */
        async function retrieveCard(
            cardUUID: string,
            generatedBy: string,
        ): Promise<TradingCardInfo> {
            const card = await getCard(cardUUID, generatedBy);
            return card;
        }

        // Check the UUID of the current user
        getLoggedInUserID().then((id) => {
            if (id) {
                // Pull the card from local storage
                const storedCardInfoJSON = localStorage.getItem("cardInfo");
                if (cardExists && storedCardInfoJSON) {
                    // Compare the UUID of the current user to the UUID of the user who generated the card
                    // The nested JSON parsing is kinda wild
                    const cardInfoInCookie: TradingCardInfo = JSON.parse(
                        JSON.parse(storedCardInfoJSON).value,
                    );
                    // If the card was generated by the current user, set the cardOwnedByUser state to true
                    if (cardInfoInCookie.generatedBy === id) {
                        setCardOwnedByUser(true);
                    }
                    // Retrieve the card from the database and set the current card state
                    retrieveCard(
                        cardInfoInCookie.uuid,
                        cardInfoInCookie.generatedBy,
                    ).then((card) => {
                        if (cardInfoInCookie.isNil === true) {
                            setIsNil(true);
                        }
                        setCurrentCard(card);
                        updateCheckout({ onFireCard: card });
                        setCardLoaded(true);
                    });
                }
                // Open the modal if there is a card in local storage and the card is owned by the current user
                modal.onOpen();
            }
        });
        // Modal should not be triggering this useEffect
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [auth, cardExists]);

    /**
     * Redirects the user back to the checkout screen.
     */
    function onReturnToCheckout() {
        if (isNil) {
            router.push("/nil-price");
        } else {
            router.push(
                `/checkout${cardOwnedByUser ? "" : "?buyingOtherCard=true"}`,
            );
        }
    }

    /**
     * Removes the card from local storage and closes the modal.
     */
    function onRemoveCard() {
        TradingCardInfo.clearCard();
        setCardExists(false);
        modal.onClose();
    }

    return (
        <>
            {cardExists && cardLoaded && (
                <CardActionModal
                    isOpen={modal.isOpen}
                    onClose={modal.onClose}
                    currentCard={currentCard}
                    closeable={false}
                    fromName=""
                    currentUserId=""
                    cardAction={onReturnToCheckout}
                    title="Return to Checkout?"
                    subtitle={
                        "Would you like to return to the checkout screen?"
                    }
                    actionButtonText="YES"
                    actionButtonIcon={<FaCheck />}
                    secondaryAction={onRemoveCard}
                    secondaryActionText={"NO"}
                    secondaryButtonIcon={<FaXmark />}
                />
            )}
        </>
    );
}
